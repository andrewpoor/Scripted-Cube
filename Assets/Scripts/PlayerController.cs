using System;
using System.Text;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;

//The dynamically loaded scripts must inherit from this, to provide a public API.
public interface DynamicPlayerController {
   IEnumerator GetCoroutine(PlayerController parent); //Returns the coroutine that holds the scripted actions.
}

public class PlayerController : MonoBehaviour {
   public Text winLoseMessage;

   public float wallSensorRange = 100f;
   public float groundSensorRange = 1f;
   public RaycastHit frontSensorHit; //Details front sensor detects.
   public bool frontSensorDetected; //True if the front sensor has detected something.
   public RaycastHit rearSensorHit; //Details rear sensor detects.
   public bool rearSensorDetected; //True if the rear sensor has detected something.
   public RaycastHit groundSensorHit; //Details ground sensor detects.
   public bool groundSensorDetected; //True if the ground sensor has detected something.
   public float tileTime = 1.0f; //Time taken to move one tile.
   public float spinTime = 1.0f; //Time taken to turn 90 degrees.

   public GlobalScriptController scriptController;
   public Transform level;

   private bool run; //If true, run the custom script.
   private Vector3 startingPosition;
   private Quaternion startingRotation;
   private List<GameObject> actions; //Ordered list of all actions. Used to light up the currently running command.

   private Ray frontSensor = new Ray(); //Detects walls and other objects ahead of player.
   private Ray rearSensor = new Ray(); //Detects walls and other objects behind the player.
   private Ray groundSensor = new Ray(); //Detects details about the ground below the player.
   private int horizontalSensorDetectable; //Layer for things detectable with the front sensor.
   private int groundSensorDetectable; //Layer for things detectable with the front sensor.

   //For dynamically loading the user's script.
   private System.Reflection.Assembly movementAssembly;
   private string scriptPath;
   private IEnumerator scriptCoroutine;

   // Use this for initialization
   void Start () {
      winLoseMessage.text = "";
      run = false;
      horizontalSensorDetectable = LayerMask.GetMask ("HorizontalSensorDetectable");
      groundSensorDetectable = LayerMask.GetMask ("GroundSensorDetectable");
      frontSensorDetected = false;
      rearSensorDetected = false;
      groundSensorDetected = false;
      startingPosition = transform.position;
      startingRotation = transform.rotation;
      actions = new List<GameObject> ();
   }

   // Update is called once per frame
   void Update () {
      frontSensor.origin = transform.position + 0.3f * transform.forward.normalized;
      frontSensor.direction = transform.forward;
      frontSensorDetected = Physics.Raycast (frontSensor, out frontSensorHit, wallSensorRange, horizontalSensorDetectable);

      rearSensor.origin = transform.position - 0.3f * transform.forward.normalized;
      rearSensor.direction = -transform.forward;
      rearSensorDetected = Physics.Raycast (rearSensor, out rearSensorHit, wallSensorRange, horizontalSensorDetectable);

      groundSensor.origin = transform.position;
      groundSensor.direction = Vector3.down;
      groundSensorDetected = Physics.Raycast (groundSensor, out groundSensorHit, groundSensorRange, groundSensorDetectable);
   }

   // FixedUpdate is called once per frame, before physics calculations
   void FixedUpdate() {
      //If it's time to run the script, do so.
      if (run) {
         Debug.Log ("Running");

         run = false; //Only run one instance of the script at a time.

         IEnumerator script = BeginScript ();
         StartCoroutine(script);
      }
   }

   IEnumerator BeginScript()
   {
      //Wait for a moment first, to avoid visual frame issues.
      yield return new WaitForSeconds (0.5f);

      //Run the user's script.
      StartCoroutine(scriptCoroutine);
      yield return null;
   }

   void OnTriggerEnter( Collider other )
   {
      if( other.gameObject.CompareTag("ColourGreen") )
      {
         winLoseMessage.text = "You win!";
      } else if (other.gameObject.CompareTag("ColourRed") )
      {
         winLoseMessage.text = "Game over";
      }
   }

   //Compile and run the script generated by the user
   public void RunScript()
   {
      string script = scriptController.CollateScript ();

      Debug.Log (script);

      //Ensure no actions are lit up.
      for (int i = 0; i < actions.Count; i++) {
         UnlightAction (i);
      }

      //Compile the script and extract its coroutine, which contains the actions for the player to perform.
      movementAssembly = RuntimeCompiler.Compile(script);
      DynamicPlayerController dpc = (DynamicPlayerController) movementAssembly.CreateInstance("ScriptedPlayerController");
      scriptCoroutine = dpc.GetCoroutine (this);

      run = true;
   }

   //Stop the currently running script and reset the stage and player.
   public void ResetScript() {
      //Stop the script from running.
      if (scriptCoroutine != null) {
         StopCoroutine (scriptCoroutine);
      }

      winLoseMessage.text = "";
      transform.position = startingPosition;
      transform.rotation = startingRotation;

      //Reset the level.
      foreach(Transform child in level) {
         IResettable resettableObject = child.gameObject.GetComponent<IResettable> ();

         if (resettableObject != null) {
            resettableObject.ResetToStart ();
         }
      }

      run = false;
   }

   public void SetActions(List<GameObject> actionsList) {
      actions = actionsList;
   }

   public void LightUpAction(int commandID) {
      actions [commandID].GetComponent<IScriptController> ().LightUp ();
   }

   public void UnlightAction(int commandID) {
      actions [commandID].GetComponent<IScriptController> ().Unlight ();
   }

   public void SetSpeed(float speed) {
      tileTime = speed;
      spinTime = speed;
   }
}
